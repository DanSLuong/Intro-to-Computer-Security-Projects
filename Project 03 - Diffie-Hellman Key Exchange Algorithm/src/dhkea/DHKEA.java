/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dhkea;

import java.util.*;

/**
 *
 * @author danny
 */
public class DHKEA {

    /**
     * @param args the command line arguments
     */
    
    //checks whether an int is prime or not.
    public static boolean isPrime(int n) {
        //check if n is a multiple of 2
        if (n % 2 == 0) {
            return false;
        }
        //if not, then just check the odds
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        // TODO code application logic here
        Scanner console = new Scanner(System.in);
        
        System.out.println("Enter a prime number g between 1 to 10000:");
        int g = console.nextInt();
        if (isPrime(g) == false) {
            System.out.println("The number you entered was not prime.");
            System.out.println("Enter a prime number g between 1 to 10000:");
            g = console.nextInt();
        }
        
        System.out.println("Enter a prime number p between 1 to 10000:");
        int p = console.nextInt();
        if (isPrime(p) == false) {
            System.out.println("The number you entered was not prime.");
            System.out.println("Enter a prime number gp between 1 to 10000:");
            p = console.nextInt();
        }
        
        System.out.println("User A, enter a number for a between 1 to 100:");
        int a = console.nextInt();
        
        System.out.println("User B, enter a number for b between 1 to 100:");
        int b = console.nextInt();

        //Encryption from user A side
        int x = ((int) Math.pow(g, a)) % p;
        int encryptedA = (int) Math.pow(x, b);

        System.out.println("Security key generated by user A:" + encryptedA);

        //Encryption from user B side
        int y = ((int) Math.pow(g, b)) % p;
        int encryptedB = (int) Math.pow(y, a);
        System.out.println("Security key generated by user B:" + encryptedB);

        //Verifying whether the keys from A and B are same or not
        if (encryptedA == encryptedB) {
            System.out.println("The keys are same");
        } else {
            System.out.println("The keys are not same");
        }
    }

}
